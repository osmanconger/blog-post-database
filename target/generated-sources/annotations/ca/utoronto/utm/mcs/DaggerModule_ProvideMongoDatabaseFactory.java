// Generated by Dagger (https://google.github.io/dagger).
package ca.utoronto.utm.mcs;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerModule_ProvideMongoDatabaseFactory implements Factory<MongoDatabase> {
  private final DaggerModule module;

  private final Provider<MongoClient> clientProvider;

  public DaggerModule_ProvideMongoDatabaseFactory(
      DaggerModule module, Provider<MongoClient> clientProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
  }

  @Override
  public MongoDatabase get() {
    return provideInstance(module, clientProvider);
  }

  public static MongoDatabase provideInstance(
      DaggerModule module, Provider<MongoClient> clientProvider) {
    return proxyProvideMongoDatabase(module, clientProvider.get());
  }

  public static DaggerModule_ProvideMongoDatabaseFactory create(
      DaggerModule module, Provider<MongoClient> clientProvider) {
    return new DaggerModule_ProvideMongoDatabaseFactory(module, clientProvider);
  }

  public static MongoDatabase proxyProvideMongoDatabase(DaggerModule instance, MongoClient client) {
    return Preconditions.checkNotNull(
        instance.provideMongoDatabase(client),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
